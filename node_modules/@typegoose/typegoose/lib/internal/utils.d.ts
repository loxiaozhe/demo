import * as mongoose from 'mongoose';
import { AnyParamConstructor, PropOptionsWithNumberValidate, PropOptionsWithStringValidate, VirtualOptions, WhatIsIt } from '../types';
import { DecoratorKeys } from './constants';
/**
 * Returns true, if the type is included in mongoose.Schema.Types
 * @param Type The Type
 * @returns true, if it includes it
 */
export declare function isPrimitive(Type: any): boolean;
/**
 * Returns true, if it is an Object
 * @param Type The Type
 * @returns true, if it is an Object
 */
export declare function isObject(Type: any): boolean;
/**
 * Returns true, if it is an Number
 * @param Type The Type
 * @returns true, if it is an Number
 */
export declare function isNumber(Type: any): Type is number;
/**
 * Returns true, if it is an String
 * @param Type The Type
 * @returns true, if it is an String
 */
export declare function isString(Type: any): Type is string;
/**
 * Initialize the property in the schemas Map
 * @param name Name of the current Model/Class
 * @param key Key of the property
 * @param whatis What should it be for a type?
 */
export declare function initProperty(name: string, key: string, whatis: WhatIsIt): void;
/**
 * Get the Class for a given Document
 * @param document The Document
 */
export declare function getClassForDocument(document: mongoose.Document): NewableFunction | undefined;
/**
 * Return true if there are Options
 * @param options The raw Options
 */
export declare function isWithStringValidate(options: PropOptionsWithStringValidate): options is PropOptionsWithStringValidate;
/**
 * Return true if there are Options
 * @param options The raw Options
 */
export declare function isWithStringTransform(options: PropOptionsWithStringValidate): options is PropOptionsWithStringValidate;
/**
 * Return true if there are Options
 * @param options The raw Options
 */
export declare function isWithNumberValidate(options: PropOptionsWithNumberValidate): options is PropOptionsWithNumberValidate;
/**
 * Check if Options include Virtual Populate Options
 * @param options RawOptions of the Prop
 */
export declare function isWithVirtualPOP(options: any): options is VirtualOptions;
export declare const allVirtualoptions: string[];
/**
 * Check if All the required Options are present
 * @param options RawOptions of the Prop
 */
export declare function includesAllVirtualPOP(options: VirtualOptions): options is VirtualOptions;
/**
 * Merge value & existing Metadata & Save it to the class
 * Difference with "mergeMetadata" is that this one DOES save it to the class
 * @param key Metadata key
 * @param value Raw value
 * @param cl The constructor
 * @internal
 */
export declare function assignMetadata(key: DecoratorKeys, value: unknown, cl: new () => {}): any;
/**
 * Merge value & existing Metadata
 * Difference with "assignMetadata" is that this one DOES NOT save it to the class
 * @param key Metadata key
 * @param value Raw value
 * @param cl The constructor
 * @internal
 */
export declare function mergeMetadata<T = any>(key: DecoratorKeys, value: unknown, cl: new () => {}): T;
/**
 * Merge only schemaOptions from ModelOptions of the class
 * @param value The value to use
 * @param cl The Class to get the values from
 */
export declare function mergeSchemaOptions<T, U extends AnyParamConstructor<T>>(value: mongoose.SchemaOptions, cl: U): mongoose.SchemaOptions;
/**
 * Get the correct name of the class's model
 * (with suffix)
 * @param cl The Class
 */
export declare function getName<T, U extends AnyParamConstructor<T>>(cl: U): string;
/**
 * Returns if it is not defined in "schemas"
 * @param cl The Type
 */
export declare function isNotDefined(cl: any): boolean;
/**
 * Assign "__uniqueID" to a class
 * @param cl
 * @returns boolean, true if uniqueID is created, false if already existing
 */
export declare function createUniqueID(cl: any): boolean;
/**
 * Map Options to "inner" & "outer"
 * -> inner: means inner of "type: [{here})"
 * -> outer: means outer of "type: [{}], here"
 * @param rawOptions The raw options
 * @param Type The Type of the array
 * @param target The Target class
 * @param pkey Key of the Property
 */
export declare function mapArrayOptions(rawOptions: any, Type: AnyParamConstructor<any>, target: any, pkey: string): mongoose.SchemaTypeOpts<any>;
/**
 * Warn, Error or Allow if an mixed type is set
 * -> this function exists for de-duplication
 * @param target Target Class
 * @param key Property key
 */
export declare function warnMixed(target: any, key: string | symbol): void | never;
/**
 * Because since node 4.0.0 the internal util.is* functions got deprecated
 * @param val Any value to test if null or undefined
 */
export declare function isNullOrUndefined(val: unknown): val is null | undefined;
