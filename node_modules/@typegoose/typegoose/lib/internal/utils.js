"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const lodash_1 = require("lodash");
const mongoose = require("mongoose");
const util_1 = require("util");
const logSettings_1 = require("../logSettings");
const types_1 = require("../types");
const constants_1 = require("./constants");
const data_1 = require("./data");
const errors_1 = require("./errors");
/**
 * Returns true, if the type is included in mongoose.Schema.Types
 * @param Type The Type
 * @returns true, if it includes it
 */
function isPrimitive(Type) {
    if (Type && typeof Type.name === 'string') {
        // try to match "Type.name" with all the Property Names of "mongoose.Schema.Types"
        // (like "String" with "mongoose.Schema.Types.String")
        return Object.getOwnPropertyNames(mongoose.Schema.Types).includes(Type.name)
            // try to match "Type.name" with all "mongoose.Schema.Types.*.name"
            // (like "SchemaString" with "mongoose.Schema.Types.String.name")
            || Object.values(mongoose.Schema.Types).findIndex((v) => v.name === Type.name) >= 0;
    }
    return false;
}
exports.isPrimitive = isPrimitive;
/**
 * Returns true, if it is an Object
 * @param Type The Type
 * @returns true, if it is an Object
 */
function isObject(Type) {
    var _a, _b;
    if (typeof ((_a = Type) === null || _a === void 0 ? void 0 : _a.name) === 'string') {
        let prototype = Type.prototype;
        let name = Type.name;
        while (name) {
            if (name === 'Object') {
                return true;
            }
            prototype = Object.getPrototypeOf(prototype);
            name = (_b = prototype) === null || _b === void 0 ? void 0 : _b.constructor.name;
        }
    }
    return false;
}
exports.isObject = isObject;
/**
 * Returns true, if it is an Number
 * @param Type The Type
 * @returns true, if it is an Number
 */
function isNumber(Type) {
    var _a;
    return ((_a = Type) === null || _a === void 0 ? void 0 : _a.name) === 'Number';
}
exports.isNumber = isNumber;
/**
 * Returns true, if it is an String
 * @param Type The Type
 * @returns true, if it is an String
 */
function isString(Type) {
    var _a;
    return ((_a = Type) === null || _a === void 0 ? void 0 : _a.name) === 'String';
}
exports.isString = isString;
/**
 * Initialize the property in the schemas Map
 * @param name Name of the current Model/Class
 * @param key Key of the property
 * @param whatis What should it be for a type?
 */
function initProperty(name, key, whatis) {
    if (!data_1.schemas.has(name)) {
        data_1.schemas.set(name, {});
    }
    switch (whatis) {
        case types_1.WhatIsIt.ARRAY:
            data_1.schemas.get(name)[key] = [{}];
            break;
        case types_1.WhatIsIt.MAP:
        case types_1.WhatIsIt.NONE:
            data_1.schemas.get(name)[key] = {};
            break;
        default:
            throw new TypeError('"whatis" is not supplied OR dosnt have a case yet!');
    }
}
exports.initProperty = initProperty;
/**
 * Get the Class for a given Document
 * @param document The Document
 */
function getClassForDocument(document) {
    const modelName = document.constructor.modelName;
    return data_1.constructors.get(modelName);
}
exports.getClassForDocument = getClassForDocument;
/**
 * Return true if there are Options
 * @param options The raw Options
 */
function isWithStringValidate(options) {
    var _a, _b, _c, _d, _e, _f, _g;
    return !isNullOrUndefined((_f = (_d = (_b = (_a = options) === null || _a === void 0 ? void 0 : _a.match, (_b !== null && _b !== void 0 ? _b : (_c = options) === null || _c === void 0 ? void 0 : _c.enum)), (_d !== null && _d !== void 0 ? _d : (_e = options) === null || _e === void 0 ? void 0 : _e.minlength)), (_f !== null && _f !== void 0 ? _f : (_g = options) === null || _g === void 0 ? void 0 : _g.maxlength)));
}
exports.isWithStringValidate = isWithStringValidate;
/**
 * Return true if there are Options
 * @param options The raw Options
 */
function isWithStringTransform(options) {
    var _a, _b;
    return !isNullOrUndefined((_b = (_a = options.lowercase, (_a !== null && _a !== void 0 ? _a : options.uppercase)), (_b !== null && _b !== void 0 ? _b : options.trim)));
}
exports.isWithStringTransform = isWithStringTransform;
/**
 * Return true if there are Options
 * @param options The raw Options
 */
function isWithNumberValidate(options) {
    var _a;
    return !isNullOrUndefined((_a = options.min, (_a !== null && _a !== void 0 ? _a : options.max)));
}
exports.isWithNumberValidate = isWithNumberValidate;
const virtualOptions = ['localField', 'foreignField'];
/**
 * Check if Options include Virtual Populate Options
 * @param options RawOptions of the Prop
 */
function isWithVirtualPOP(options) {
    return Object.keys(options).some((v) => virtualOptions.includes(v));
}
exports.isWithVirtualPOP = isWithVirtualPOP;
exports.allVirtualoptions = virtualOptions.slice(0);
exports.allVirtualoptions.push('ref');
/**
 * Check if All the required Options are present
 * @param options RawOptions of the Prop
 */
function includesAllVirtualPOP(options) {
    return exports.allVirtualoptions.every((v) => Object.keys(options).includes(v));
}
exports.includesAllVirtualPOP = includesAllVirtualPOP;
/**
 * Merge value & existing Metadata & Save it to the class
 * Difference with "mergeMetadata" is that this one DOES save it to the class
 * @param key Metadata key
 * @param value Raw value
 * @param cl The constructor
 * @internal
 */
function assignMetadata(key, value, cl) {
    if (isNullOrUndefined(value)) {
        return value;
    }
    const newValue = mergeMetadata(key, value, cl);
    Reflect.defineMetadata(key, newValue, cl);
    return newValue;
}
exports.assignMetadata = assignMetadata;
/**
 * Merge value & existing Metadata
 * Difference with "assignMetadata" is that this one DOES NOT save it to the class
 * @param key Metadata key
 * @param value Raw value
 * @param cl The constructor
 * @internal
 */
function mergeMetadata(key, value, cl) {
    var _a;
    if (typeof key !== 'string') {
        throw new TypeError(`"${key}"(key) is not a string! (assignMetadata)`);
    }
    if (typeof cl !== 'function') {
        throw new errors_1.NoValidClass(cl);
    }
    // Please dont remove the other values from the function, even when unused - it is made to be clear what is what
    const current = lodash_1.cloneDeepWith((_a = Reflect.getMetadata(key, cl), (_a !== null && _a !== void 0 ? _a : {})), (val, ckey, obj, stack) => customMerger(key, val));
    return lodash_1.mergeWith({}, current, value, (objValue, srcValue, ckey, object, source, stack) => customMerger(key, srcValue));
}
exports.mergeMetadata = mergeMetadata;
/**
 * Used for lodash customizer's (cloneWith, cloneDeepWith, mergeWith)
 * @param key the key of the current object
 * @param val the value of the object that should get returned for "existingMongoose" & "existingConnection"
 */
function customMerger(key, val) {
    if (isNullOrUndefined(key) || typeof key !== 'string') {
        return undefined;
    }
    if (/^(existingMongoose|existingConnection)$/.test(key)) {
        return val;
    }
    return undefined;
}
/**
 * Merge only schemaOptions from ModelOptions of the class
 * @param value The value to use
 * @param cl The Class to get the values from
 */
function mergeSchemaOptions(value, cl) {
    return mergeMetadata(constants_1.DecoratorKeys.ModelOptions, { schemaOptions: value }, cl).schemaOptions;
}
exports.mergeSchemaOptions = mergeSchemaOptions;
/**
 * Get the correct name of the class's model
 * (with suffix)
 * @param cl The Class
 */
function getName(cl) {
    var _a, _b, _c, _d, _e, _f, _g, _h;
    const options = (_a = Reflect.getMetadata(constants_1.DecoratorKeys.ModelOptions, cl), (_a !== null && _a !== void 0 ? _a : {}));
    const baseName = cl.name;
    if (options.options && options.options.automaticName) {
        const suffix = (_d = (_c = (_b = options) === null || _b === void 0 ? void 0 : _b.options) === null || _c === void 0 ? void 0 : _c.customName, (_d !== null && _d !== void 0 ? _d : (_f = (_e = options) === null || _e === void 0 ? void 0 : _e.schemaOptions) === null || _f === void 0 ? void 0 : _f.collection));
        return !isNullOrUndefined(suffix) ? `${baseName}_${suffix}` : baseName;
    }
    if (typeof ((_h = (_g = options) === null || _g === void 0 ? void 0 : _g.options) === null || _h === void 0 ? void 0 : _h.customName) === 'string') {
        if (options.options.customName.length <= 0) {
            throw new TypeError(`"customName" must be a string AND at least one character ("${cl.name}")`);
        }
        return options.options.customName;
    }
    return baseName;
}
exports.getName = getName;
/**
 * Returns if it is not defined in "schemas"
 * @param cl The Type
 */
function isNotDefined(cl) {
    return typeof cl === 'function' &&
        !isPrimitive(cl) &&
        cl !== Object &&
        cl !== mongoose.Schema.Types.Buffer &&
        isNullOrUndefined(data_1.schemas.get(getName(cl)));
}
exports.isNotDefined = isNotDefined;
/**
 * Assign "__uniqueID" to a class
 * @param cl
 * @returns boolean, true if uniqueID is created, false if already existing
 */
function createUniqueID(cl) {
    if (isNullOrUndefined(cl.__uniqueID)) {
        cl.__uniqueID = Date.now();
        return true;
    }
    return false;
}
exports.createUniqueID = createUniqueID;
/**
 * Map Options to "inner" & "outer"
 * -> inner: means inner of "type: [{here})"
 * -> outer: means outer of "type: [{}], here"
 * @param rawOptions The raw options
 * @param Type The Type of the array
 * @param target The Target class
 * @param pkey Key of the Property
 */
function mapArrayOptions(rawOptions, Type, target, pkey) {
    var _a, _b;
    if (getName(Type) in mongoose.Schema.Types) {
        logSettings_1.logger.info('Converting "%s" to mongoose Type', getName(Type));
        Type = mongoose.Schema.Types[getName(Type)];
        /* istanbul ignore next */
        if (Type === mongoose.Schema.Types.Mixed) {
            warnMixed(target, pkey);
        }
    }
    if (isNullOrUndefined(Type.prototype.OptionsConstructor)) {
        throw new TypeError('Type does not have an valid "OptionsConstructor"!');
    }
    const options = Object.assign({}, rawOptions); // for sanity
    delete options.items;
    const returnObject = {
        type: [{
                type: Type
            }]
    };
    // "mongoose as any" is because the types package does not yet have an entry for "SchemaTypeOptions"
    if (Type.prototype.OptionsConstructor.prototype instanceof mongoose.SchemaTypeOptions) {
        for (const [key, value] of Object.entries(options)) {
            if (Object.getOwnPropertyNames(Type.prototype.OptionsConstructor.prototype).includes(key)) {
                returnObject.type[0][key] = value;
            }
            else {
                returnObject[key] = value;
            }
        }
    }
    else {
        logSettings_1.logger.info('The Type "%s" does not have an OptionsConstructor', getName(Type));
    }
    if (typeof ((_a = options) === null || _a === void 0 ? void 0 : _a.innerOptions) === 'object') {
        for (const [key, value] of Object.entries(options.innerOptions)) {
            returnObject.type[0][key] = value;
        }
    }
    if (typeof ((_b = options) === null || _b === void 0 ? void 0 : _b.outerOptions) === 'object') {
        for (const [key, value] of Object.entries(options.outerOptions)) {
            returnObject[key] = value;
        }
    }
    logSettings_1.logger.debug('Final mapped Options for Type "%s"', getName(Type), returnObject);
    return returnObject;
}
exports.mapArrayOptions = mapArrayOptions;
/**
 * Warn, Error or Allow if an mixed type is set
 * -> this function exists for de-duplication
 * @param target Target Class
 * @param key Property key
 */
function warnMixed(target, key) {
    var _a, _b, _c;
    const name = getName(target);
    const modelOptions = (_a = Reflect.getMetadata(constants_1.DecoratorKeys.ModelOptions, target), (_a !== null && _a !== void 0 ? _a : {}));
    switch ((_c = (_b = modelOptions) === null || _b === void 0 ? void 0 : _b.options) === null || _c === void 0 ? void 0 : _c.allowMixed) {
        default:
        case types_1.Severity.WARN:
            logSettings_1.logger.warn('Implicitly setting "Mixed" is not allowed! (%s, %s)', name, key);
            break;
        case types_1.Severity.ALLOW:
            break;
        case types_1.Severity.ERROR:
            throw new TypeError(util_1.format('Implicitly setting "Mixed" is not allowed! (%s, %s)', name, key));
    }
    return; // always return, if "allowMixed" is not "ERROR"
}
exports.warnMixed = warnMixed;
/**
 * Because since node 4.0.0 the internal util.is* functions got deprecated
 * @param val Any value to test if null or undefined
 */
function isNullOrUndefined(val) {
    return val === null || val === undefined;
}
exports.isNullOrUndefined = isNullOrUndefined;
//# sourceMappingURL=data:application/json;base64,