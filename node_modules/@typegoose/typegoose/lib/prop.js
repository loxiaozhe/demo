"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const mongoose = require("mongoose");
const util_1 = require("util");
const constants_1 = require("./internal/constants");
const data_1 = require("./internal/data");
const errors_1 = require("./internal/errors");
const utils = require("./internal/utils");
const logSettings_1 = require("./logSettings");
const typegoose_1 = require("./typegoose");
const types_1 = require("./types");
/**
 * Base Function for prop & arrayProp
 * @param input All the options needed for prop's
 */
function baseProp(input) {
    const { Type, key, origOptions, target, whatis } = input;
    if (Type === target.constructor) { // prevent "infinite" buildSchema loop / Maximum Stack size exceeded
        throw new TypeError('It seems like the type used is the same as the target class, which is currently not supported\n'
            + `Please look at https://github.com/typegoose/typegoose/issues/42 for more infomation, for now please avoid using it!`);
    }
    // assign a Unique ID to the target class
    utils.createUniqueID(target);
    const existingMapForTarget = Reflect.getOwnMetadata(constants_1.DecoratorKeys.PropCache, target);
    if (utils.isNullOrUndefined(existingMapForTarget)) {
        Reflect.defineMetadata(constants_1.DecoratorKeys.PropCache, new Map(), target);
    }
    const mapForTarget = (existingMapForTarget !== null && existingMapForTarget !== void 0 ? existingMapForTarget : Reflect.getOwnMetadata(constants_1.DecoratorKeys.PropCache, target));
    mapForTarget.set(key, { origOptions, Type, target, key, whatis });
    logSettings_1.logger.debug('Added "%s.%s" to the Decorator Cache', utils.getName(target.constructor), key);
}
/**
 * Function that is the actual processing of the prop's (used for caching)
 * @param input All the options needed for prop's
 */
function _buildPropMetadata(input) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q;
    let { Type } = input;
    const { key, origOptions, target, whatis } = input;
    const rawOptions = Object.assign({}, origOptions);
    logSettings_1.logger.debug('Starting to process "%s.%s"', target.constructor.name, key);
    if (!utils.isNullOrUndefined(rawOptions.type)) {
        logSettings_1.logger.info('Prop Option "type" is set to', rawOptions.type);
        Type = rawOptions.type;
    }
    if (utils.isNotDefined(Type) && utils.isNullOrUndefined(rawOptions.type)) {
        typegoose_1.buildSchema(Type, { _id: typeof rawOptions._id === 'boolean' ? rawOptions._id : true });
    }
    const name = utils.getName(target.constructor);
    if (!data_1.virtuals.has(name)) {
        data_1.virtuals.set(name, new Map());
    }
    if (utils.isWithVirtualPOP(rawOptions)) {
        if (!utils.includesAllVirtualPOP(rawOptions)) {
            throw new errors_1.NotAllVPOPElementsError(name, key);
        }
        data_1.virtuals.get(name).set(key, rawOptions);
        return;
    }
    utils.initProperty(name, key, whatis);
    if (!utils.isNullOrUndefined(rawOptions.set) || !utils.isNullOrUndefined(rawOptions.get)) {
        if (typeof ((_a = rawOptions) === null || _a === void 0 ? void 0 : _a.set) !== 'function') {
            throw new TypeError(`"${name}.${key}" does not have a set function!`);
        }
        if (typeof ((_b = rawOptions) === null || _b === void 0 ? void 0 : _b.get) !== 'function') {
            throw new TypeError(`"${name}.${key}" does not have a get function!`);
        }
        const newType = ((_c = rawOptions) === null || _c === void 0 ? void 0 : _c.type) ? rawOptions.type : Type;
        if (!utils.isNullOrUndefined((_d = rawOptions) === null || _d === void 0 ? void 0 : _d.type)) {
            delete rawOptions.type;
        }
        /*
         * Note:
         * this dosnt have a check if prop & returntype of the function is the same,
         * because it cant be accessed at runtime
         */
        data_1.schemas.get(name)[key] = Object.assign(Object.assign(Object.assign({}, data_1.schemas.get(name)[key]), { type: newType }), rawOptions);
        return;
    }
    const ref = (_e = rawOptions) === null || _e === void 0 ? void 0 : _e.ref;
    const refType = (_j = (_g = (_f = rawOptions) === null || _f === void 0 ? void 0 : _f.refType, (_g !== null && _g !== void 0 ? _g : (_h = rawOptions) === null || _h === void 0 ? void 0 : _h.type)), (_j !== null && _j !== void 0 ? _j : mongoose.Schema.Types.ObjectId));
    if (!utils.isNullOrUndefined(ref)) {
        delete rawOptions.ref;
        const refName = typeof ref === 'string' ? ref : utils.getName(ref);
        switch (whatis) {
            case types_1.WhatIsIt.ARRAY:
                data_1.schemas.get(name)[key][0] = Object.assign(Object.assign(Object.assign({}, data_1.schemas.get(name)[key][0]), { type: refType, ref: refName }), rawOptions);
                break;
            case types_1.WhatIsIt.NONE:
                data_1.schemas.get(name)[key] = Object.assign(Object.assign(Object.assign({}, data_1.schemas.get(name)[key]), { type: refType, ref: refName }), rawOptions);
                break;
            default:
                throw new TypeError(util_1.format('"ref" is not supported for "%s"! (%s, %s)', whatis, utils.getName(target), key));
        }
        return;
    }
    const refPath = (_k = rawOptions) === null || _k === void 0 ? void 0 : _k.refPath;
    if (refPath) {
        if (typeof refPath !== 'string') {
            throw new TypeError(util_1.format('"refPath" for "%s, %s" should be of type String!', utils.getName(target), key));
        }
        delete rawOptions.refPath;
        switch (whatis) {
            case types_1.WhatIsIt.ARRAY:
                data_1.schemas.get(name)[key][0] = Object.assign(Object.assign(Object.assign({}, data_1.schemas.get(name)[key][0]), { type: refType, refPath }), rawOptions);
                break;
            case types_1.WhatIsIt.NONE:
                data_1.schemas.get(name)[key] = Object.assign(Object.assign(Object.assign({}, data_1.schemas.get(name)[key]), { type: refType, refPath }), rawOptions);
                break;
            default:
                throw new TypeError(util_1.format('"refPath" is not supported for "%s"! (%s, %s)', whatis, utils.getName(target), key));
        }
        return;
    }
    const enumOption = (_l = rawOptions) === null || _l === void 0 ? void 0 : _l.enum;
    if (!utils.isNullOrUndefined(enumOption)) {
        if (!Array.isArray(enumOption)) {
            // the following "if" it to not break existing databases
            if ((_o = (_m = data_1.globalOptions) === null || _m === void 0 ? void 0 : _m.globalOptions) === null || _o === void 0 ? void 0 : _o.useNewEnum) {
                rawOptions.enum = Object.entries(enumOption) // get all key-value pairs of the enum
                    // filter out the "reverse (value -> name) mappings"
                    // https://www.typescriptlang.org/docs/handbook/enums.html#reverse-mappings
                    .filter(([enumKey, enumValue]) => {
                    return Number.isNaN(parseInt(enumKey, 10));
                })
                    .map(([enumKey, enumValue], i, enumArray) => {
                    if (typeof enumValue !== 'string') { // disallow the use of enums that dont have strings associated with them
                        throw new TypeError(util_1.format('All Enums supplied to @prop must have strings associated with them!\n'
                            + 'Encountered at "%s.%s", with property: %s.%s', utils.getName(target.constructor), key, enumKey, typeof enumValue));
                    }
                    return enumValue;
                });
            }
            else {
                // old behaviour
                // TODO: remove in typegoose 7.0
                logSettings_1.logger.warn('Old Enum Behaviour is used, please upgrade to the new one');
                rawOptions.enum = Object.keys(enumOption).map((propKey) => enumOption[propKey]);
            }
        }
    }
    const selectOption = (_p = rawOptions) === null || _p === void 0 ? void 0 : _p.select;
    if (typeof selectOption === 'boolean') {
        data_1.schemas.get(name)[key] = Object.assign(Object.assign({}, data_1.schemas.get(name)[key]), { select: selectOption });
    }
    {
        // check if Type is actually a real working Type
        if (utils.isNullOrUndefined(Type) || typeof Type !== 'function') {
            throw new errors_1.InvalidTypeError(target.constructor.name, key, Type);
        }
        // check for validation inconsistencies
        if (utils.isWithStringValidate(rawOptions) && !utils.isString(Type)) {
            throw new errors_1.NotStringTypeError(key);
        }
        // check for transform inconsistencies
        if (utils.isWithStringTransform(rawOptions) && !utils.isString(Type)) {
            throw new errors_1.NotStringTypeError(key);
        }
        if (utils.isWithNumberValidate(rawOptions) && !utils.isNumber(Type)) {
            throw new errors_1.NotNumberTypeError(key);
        }
    }
    const subSchema = data_1.schemas.get(utils.getName(Type));
    if (!subSchema && !utils.isPrimitive(Type) && !utils.isObject(Type)) {
        throw new errors_1.InvalidPropError(Type.name, key); // This seems to be never thrown!
    }
    const { ['items']: items } = rawOptions, options = tslib_1.__rest(rawOptions, ['items']);
    if (utils.isPrimitive(Type)) {
        switch (whatis) {
            case types_1.WhatIsIt.ARRAY:
                data_1.schemas.get(name)[key] = Object.assign(Object.assign({}, data_1.schemas.get(name)[key][0]), utils.mapArrayOptions(rawOptions, Type, target, key));
                return;
            case types_1.WhatIsIt.MAP:
                // "default" is a reserved keyword, thats why "_default" is used
                const { default: _default } = options;
                delete options.default;
                delete options.of;
                data_1.schemas.get(name)[key] = Object.assign(Object.assign({}, data_1.schemas.get(name)[key]), { type: Map, default: _default, of: Object.assign({ type: Type }, options) });
                return;
            case types_1.WhatIsIt.NONE:
                data_1.schemas.get(name)[key] = Object.assign(Object.assign(Object.assign({}, data_1.schemas.get(name)[key]), options), { type: Type });
                return;
            default:
                throw new Error(`"${whatis}"(whatis(primitive)) is invalid for "${name}.${key}"`);
        }
    }
    // If the 'Type' is not a 'Primitive Type' and no subschema was found treat the type as 'Object'
    // so that mongoose can store it as nested document
    if (utils.isObject(Type) && !subSchema) {
        utils.warnMixed(target, key);
        data_1.schemas.get(name)[key] = Object.assign(Object.assign(Object.assign({}, data_1.schemas.get(name)[key]), options), { type: mongoose.Schema.Types.Mixed });
        return;
    }
    const virtualSchema = typegoose_1.buildSchema(Type, {
        _id: typeof ((_q = rawOptions) === null || _q === void 0 ? void 0 : _q._id) === 'boolean' ? rawOptions._id : true
    });
    switch (whatis) {
        case types_1.WhatIsIt.ARRAY:
            data_1.schemas.get(name)[key] = Object.assign(Object.assign(Object.assign({}, data_1.schemas.get(name)[key][0]), options), { type: [virtualSchema] });
            return;
        case types_1.WhatIsIt.MAP:
            data_1.schemas.get(name)[key] = Object.assign(Object.assign({}, data_1.schemas.get(name)[key]), { type: Map, of: Object.assign({ type: virtualSchema }, options) });
            return;
        case types_1.WhatIsIt.NONE:
            data_1.schemas.get(name)[key] = Object.assign(Object.assign(Object.assign({}, data_1.schemas.get(name)[key]), options), { type: virtualSchema });
            return;
        default:
            throw new Error(`"${whatis}"(whatis(subSchema)) is invalid for "${name}.${key}"`);
    }
}
exports._buildPropMetadata = _buildPropMetadata;
/**
 * Set Property Options for the property below
 * @param options Options
 * @public
 */
function prop(options = {}) {
    return (target, key) => {
        const Type = Reflect.getMetadata(constants_1.DecoratorKeys.Type, target, key);
        if (utils.isNullOrUndefined(Type)) {
            throw new errors_1.NoMetadataError(key);
        }
        // soft errors
        {
            if ('items' in options) {
                logSettings_1.logger.warn('You might not want to use option "items" in a @prop, use @arrayProp (%s.%s)', utils.getName(target), key);
            }
            if ('of' in options) {
                logSettings_1.logger.warn('You might not want to use option "of" in a @prop, use @mapProp (%s.%s)', utils.getName(target), key);
            }
        }
        baseProp({
            Type,
            key,
            origOptions: options,
            target,
            whatis: types_1.WhatIsIt.NONE
        });
    };
}
exports.prop = prop;
/**
 * Set Property(that are Maps) Options for the property below
 * @param options Options for the Map
 * @public
 */
function mapProp(options) {
    return (target, key) => {
        var _a;
        const Type = (_a = options) === null || _a === void 0 ? void 0 : _a.of;
        if ('items' in options) {
            logSettings_1.logger.warn('You might not want to use option "items" in a @mapProp, use @arrayProp (%s.%s)', utils.getName(target), key);
        }
        baseProp({
            Type,
            key,
            origOptions: options,
            target,
            whatis: types_1.WhatIsIt.MAP
        });
    };
}
exports.mapProp = mapProp;
/**
 * Set Property(that are Arrays) Options for the property below
 * @param options Options
 * @public
 */
function arrayProp(options) {
    return (target, key) => {
        var _a;
        const Type = (_a = options) === null || _a === void 0 ? void 0 : _a.items;
        if ('of' in options) {
            logSettings_1.logger.warn('You might not want to use option "of" in a @arrayProp, use @mapProp (%s.%s)', utils.getName(target), key);
        }
        if ('items' in options) {
            delete options.items;
        }
        if ('itemsRef' in options) {
            options.ref = options.itemsRef;
            delete options.itemsRef;
        }
        if ('itemsRefPath' in options) {
            options.refPath = options.itemsRefPath;
            delete options.itemsRefPath;
        }
        if ('itemsRefType' in options) {
            options.refType = options.itemsRefType;
            delete options.itemsRefType;
        }
        baseProp({
            Type,
            key,
            origOptions: options,
            target,
            whatis: types_1.WhatIsIt.ARRAY
        });
    };
}
exports.arrayProp = arrayProp;
//# sourceMappingURL=data:application/json;base64,