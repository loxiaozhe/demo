"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
/* imports */
const mongoose = require("mongoose");
exports.mongoose = mongoose;
require("reflect-metadata");
const semver = require("semver");
const util_1 = require("util");
/* istanbul ignore next */
if (semver.lt(mongoose.version, '5.7.7')) {
    throw new Error('Please use mongoose 5.7.7 or higher');
}
if (semver.lt(process.version.slice(1), '8.10.0')) {
    logSettings_1.logger.warn('You are using a NodeJS Version below 8.10.0, Please Upgrade!');
}
const defaultClasses = require("./defaultClasses");
exports.defaultClasses = defaultClasses;
const constants_1 = require("./internal/constants");
const data_1 = require("./internal/data");
const errors_1 = require("./internal/errors");
const schema_1 = require("./internal/schema");
const utils_1 = require("./internal/utils");
const logSettings_1 = require("./logSettings");
var logSettings_2 = require("./logSettings");
exports.setLogLevel = logSettings_2.setLogLevel;
exports.LogLevels = logSettings_2.LogLevels;
tslib_1.__exportStar(require("./prop"), exports);
tslib_1.__exportStar(require("./hooks"), exports);
tslib_1.__exportStar(require("./plugin"), exports);
tslib_1.__exportStar(require("."), exports);
tslib_1.__exportStar(require("./typeguards"), exports);
tslib_1.__exportStar(require("./optionsProp"), exports);
var types_1 = require("./types");
exports.Severity = types_1.Severity;
var utils_2 = require("./internal/utils");
exports.getClassForDocument = utils_2.getClassForDocument;
tslib_1.__exportStar(require("./globalOptions"), exports);
/** @deprecated */
class Typegoose {
    /* istanbul ignore next */
    constructor() {
        // tslint:disable-next-line:no-empty
        util_1.deprecate(() => { }, 'Typegoose Class is Deprecated!')();
    }
    /* istanbul ignore next */
    /** @deprecated */
    getModelForClass(cl, settings) {
        return util_1.deprecate(getModelForClass.bind(undefined, cl, settings), 'Typegoose Class is Deprecated!');
    }
    /* istanbul ignore next */
    /** @deprecated */
    setModelForClass(cl, settings) {
        return util_1.deprecate(getModelForClass.bind(undefined, cl, settings), 'Typegoose Class is Deprecated!');
    }
    /* istanbul ignore next */
    /** @deprecated */
    buildSchema(cl) {
        return util_1.deprecate(buildSchema.bind(undefined, cl), 'Typegoose Class is Deprecated!');
    }
}
exports.Typegoose = Typegoose;
/**
 * Get a Model for a Class
 * Executes .setModelForClass if it cant find it already
 * @param cl The uninitialized Class
 * @returns The Model
 * @public
 * @example
 * ```ts
 * class Name {}
 *
 * const NameModel = getModelForClass(Name);
 * ```
 */
function getModelForClass(cl, options) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j;
    if (typeof cl !== 'function') {
        throw new errors_1.NoValidClass(cl);
    }
    options = typeof options === 'object' ? options : {};
    const roptions = utils_1.mergeMetadata(constants_1.DecoratorKeys.ModelOptions, options, cl);
    const name = utils_1.getName(cl);
    if (data_1.models.has(name)) {
        return data_1.models.get(name);
    }
    const model = (_f = (_c = (_b = (_a = roptions) === null || _a === void 0 ? void 0 : _a.existingConnection) === null || _b === void 0 ? void 0 : _b.model.bind(roptions.existingConnection), (_c !== null && _c !== void 0 ? _c : (_e = (_d = roptions) === null || _d === void 0 ? void 0 : _d.existingMongoose) === null || _e === void 0 ? void 0 : _e.model.bind(roptions.existingMongoose))), (_f !== null && _f !== void 0 ? _f : mongoose.model.bind(mongoose)));
    const compiledmodel = model(name, buildSchema(cl, roptions.schemaOptions));
    const refetchedOptions = (_g = Reflect.getMetadata(constants_1.DecoratorKeys.ModelOptions, cl), (_g !== null && _g !== void 0 ? _g : {}));
    if ((_j = (_h = refetchedOptions) === null || _h === void 0 ? void 0 : _h.options) === null || _j === void 0 ? void 0 : _j.runSyncIndexes) {
        compiledmodel.syncIndexes();
    }
    return addModelToTypegoose(compiledmodel, cl);
}
exports.getModelForClass = getModelForClass;
/**
 * Get Model from internal cache
 * @param key ModelName key
 */
function getModelWithString(key) {
    if (typeof key !== 'string') {
        throw new TypeError(util_1.format('Expected "key" to be a string, got "%s"', key));
    }
    return data_1.models.get(key);
}
exports.getModelWithString = getModelWithString;
/* istanbul ignore next */
/**
 * Builds the Schema & The Model
 * DEPRECTAED: use getModelForClass
 * @param cl The uninitialized Class
 * @returns The Model
 * @deprecated
 */
function setModelForClass(cl) {
    return util_1.deprecate(getModelForClass.bind(undefined, cl), 'setModelForClass is deprecated, please use getModelForClass (see README#Migrate to 6.0.0)');
}
exports.setModelForClass = setModelForClass;
/**
 * Generates a Mongoose schema out of class props, iterating through all parents
 * @param cl The not initialized Class
 * @returns Returns the Build Schema
 */
function buildSchema(cl, options) {
    var _a;
    if (typeof cl !== 'function') {
        throw new errors_1.NoValidClass(cl);
    }
    const mergedOptions = utils_1.mergeSchemaOptions(options, cl);
    let sch;
    /** Parent Constructor */
    let parentCtor = Object.getPrototypeOf(cl.prototype).constructor;
    // iterate trough all parents
    while (((_a = parentCtor) === null || _a === void 0 ? void 0 : _a.name) !== 'Object') {
        /* istanbul ignore next */
        if (parentCtor.name === 'Typegoose') { // TODO: remove this "if", if the Typegoose class gets removed [DEPRECATION]
            util_1.deprecate(() => undefined, 'The Typegoose Class is deprecated, please try to remove it')();
            break;
        }
        // extend schema
        sch = schema_1._buildSchema(parentCtor, sch, mergedOptions);
        // set next parent
        parentCtor = Object.getPrototypeOf(parentCtor.prototype).constructor;
    }
    // get schema of current model
    sch = schema_1._buildSchema(cl, sch, mergedOptions);
    return sch;
}
exports.buildSchema = buildSchema;
/**
 * This can be used to add custom Models to Typegoose, with the type infomation of cl
 * Note: no gurantee that the type infomation is fully correct
 * @param model The model to store
 * @param cl The Class to store
 * @example
 * ```ts
 * class T {}
 *
 * const schema = buildSchema(T);
 * // modifications to the schame can be done
 * const model = addModelToTypegoose(mongoose.model(schema), T);
 * ```
 */
function addModelToTypegoose(model, cl) {
    if (!(model.prototype instanceof mongoose.Model)) {
        throw new TypeError(`"${model}" is not a valid Model!`);
    }
    if (typeof cl !== 'function') {
        throw new errors_1.NoValidClass(cl);
    }
    const name = utils_1.getName(cl);
    if (data_1.constructors.has(name)) {
        throw new Error(util_1.format('It seems like "addModelToTypegoose" got called twice\n'
            + 'Or multiple classes with the same name are used, which is not supported!'
            + '(%s)', name));
    }
    data_1.models.set(name, model);
    data_1.constructors.set(name, cl);
    return data_1.models.get(name);
}
exports.addModelToTypegoose = addModelToTypegoose;
/**
 * Deletes an existing model so that it can be overwritten
 * with another model
 *
 * @param key
 */
function deleteModel(name) {
    if (typeof name !== 'string') {
        throw new TypeError('name is not an string! (deleteModel)');
    }
    if (!data_1.models.has(name)) {
        throw new Error(`Model "${name}" could not be found`);
    }
    logSettings_1.logger.debug('Deleting Model "%s"', name);
    data_1.models.get(name).db.deleteModel(name);
    data_1.models.delete(name);
    data_1.constructors.delete(name);
}
exports.deleteModel = deleteModel;
/**
 * Delete a model, with the given class
 * @param cl The Class
 */
function deleteModelWithClass(cl) {
    if (typeof cl !== 'function') {
        throw new errors_1.NoValidClass(cl);
    }
    return deleteModel(utils_1.getName(cl));
}
exports.deleteModelWithClass = deleteModelWithClass;
/**
 * Build a Model from a given class and return the model
 * @param from The Model to build From
 * @param cl The Class to make a model out
 * @param id The Identifier to use to differentiate documents (default: cl.name)
 * @example
 * ```ts
 * class C1 {}
 * class C2 extends C1 {}
 *
 * const C1Model = getModelForClass(C1);
 * const C2Model = getDiscriminatorModelForClass(C1Model, C1);
 * ```
 */
function getDiscriminatorModelForClass(from, cl, id) {
    if (!(from.prototype instanceof mongoose.Model)) {
        throw new TypeError(`"${from}" is not a valid Model!`);
    }
    if (typeof cl !== 'function') {
        throw new errors_1.NoValidClass(cl);
    }
    const name = utils_1.getName(cl);
    if (data_1.models.has(name)) {
        return data_1.models.get(name);
    }
    const sch = buildSchema(cl);
    const discriminatorKey = sch.get('discriminatorKey');
    if (sch.path(discriminatorKey)) {
        sch.paths[discriminatorKey].options.$skipDiscriminatorCheck = true;
    }
    const model = from.discriminator(name, sch, id ? id : name);
    return addModelToTypegoose(model, cl);
}
exports.getDiscriminatorModelForClass = getDiscriminatorModelForClass;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHlwZWdvb3NlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3R5cGVnb29zZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSxhQUFhO0FBQ2IscUNBQXFDO0FBOEI1Qiw0QkFBUTtBQTdCakIsNEJBQTBCO0FBQzFCLGlDQUFpQztBQUNqQywrQkFBeUM7QUFFekMsMEJBQTBCO0FBQzFCLElBQUksTUFBTSxDQUFDLEVBQUUsQ0FBQyxRQUFRLENBQUMsT0FBTyxFQUFFLE9BQU8sQ0FBQyxFQUFFO0lBQ3hDLE1BQU0sSUFBSSxLQUFLLENBQUMscUNBQXFDLENBQUMsQ0FBQztDQUN4RDtBQUVELElBQUksTUFBTSxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRSxRQUFRLENBQUMsRUFBRTtJQUNqRCxvQkFBTSxDQUFDLElBQUksQ0FBQyw4REFBOEQsQ0FBQyxDQUFDO0NBQzdFO0FBRUQsbURBQW1EO0FBd0IxQyx3Q0FBYztBQXZCdkIsb0RBQXFEO0FBQ3JELDBDQUF1RDtBQUN2RCw4Q0FBaUQ7QUFDakQsOENBQWlEO0FBQ2pELDRDQUE4RTtBQUM5RSwrQ0FBdUM7QUFXdkMsNkNBQXVEO0FBQTlDLG9DQUFBLFdBQVcsQ0FBQTtBQUFFLGtDQUFBLFNBQVMsQ0FBQTtBQUMvQixpREFBdUI7QUFDdkIsa0RBQXdCO0FBQ3hCLG1EQUF5QjtBQUN6Qiw0Q0FBa0I7QUFDbEIsdURBQTZCO0FBQzdCLHdEQUE4QjtBQUc5QixpQ0FBbUQ7QUFBMUMsMkJBQUEsUUFBUSxDQUFBO0FBQ2pCLDBDQUF1RDtBQUE5QyxzQ0FBQSxtQkFBbUIsQ0FBQTtBQUM1QiwwREFBZ0M7QUFFaEMsa0JBQWtCO0FBQ2xCLE1BQXNCLFNBQVM7SUFDN0IsMEJBQTBCO0lBQzFCO1FBQ0Usb0NBQW9DO1FBQ3BDLGdCQUFTLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxFQUFFLGdDQUFnQyxDQUFDLEVBQUUsQ0FBQztJQUMzRCxDQUFDO0lBRUQsMEJBQTBCO0lBQzFCLGtCQUFrQjtJQUNYLGdCQUFnQixDQUFzQyxFQUFLLEVBQUUsUUFBYztRQUNoRixPQUFPLGdCQUFTLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxFQUFFLEVBQUUsUUFBUSxDQUFDLEVBQUUsZ0NBQWdDLENBQUMsQ0FBQztJQUNyRyxDQUFDO0lBRUQsMEJBQTBCO0lBQzFCLGtCQUFrQjtJQUNYLGdCQUFnQixDQUFzQyxFQUFLLEVBQUUsUUFBYztRQUNoRixPQUFPLGdCQUFTLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxFQUFFLEVBQUUsUUFBUSxDQUFDLEVBQUUsZ0NBQWdDLENBQUMsQ0FBQztJQUNyRyxDQUFDO0lBRUQsMEJBQTBCO0lBQzFCLGtCQUFrQjtJQUNYLFdBQVcsQ0FBc0MsRUFBSztRQUMzRCxPQUFPLGdCQUFTLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsRUFBRSxDQUFDLEVBQUUsZ0NBQWdDLENBQUMsQ0FBQztJQUN0RixDQUFDO0NBQ0Y7QUF4QkQsOEJBd0JDO0FBRUQ7Ozs7Ozs7Ozs7OztHQVlHO0FBQ0gsU0FBZ0IsZ0JBQWdCLENBQXNDLEVBQUssRUFBRSxPQUF1Qjs7SUFDbEcsSUFBSSxPQUFPLEVBQUUsS0FBSyxVQUFVLEVBQUU7UUFDNUIsTUFBTSxJQUFJLHFCQUFZLENBQUMsRUFBRSxDQUFDLENBQUM7S0FDNUI7SUFDRCxPQUFPLEdBQUcsT0FBTyxPQUFPLEtBQUssUUFBUSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztJQUVyRCxNQUFNLFFBQVEsR0FBa0IscUJBQWEsQ0FBQyx5QkFBYSxDQUFDLFlBQVksRUFBRSxPQUFPLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDdkYsTUFBTSxJQUFJLEdBQUcsZUFBTyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBRXpCLElBQUksYUFBTSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRTtRQUNwQixPQUFPLGFBQU0sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUEwQixDQUFDO0tBQ2xEO0lBRUQsTUFBTSxLQUFLLDJCQUFHLFFBQVEsMENBQUUsa0JBQWtCLDBDQUFFLEtBQUssQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLGtCQUFrQixvREFDN0UsUUFBUSwwQ0FBRSxnQkFBZ0IsMENBQUUsS0FBSyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsZ0JBQWdCLDBDQUNoRSxRQUFRLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsRUFBQSxDQUFDO0lBRW5DLE1BQU0sYUFBYSxHQUF3QixLQUFLLENBQUMsSUFBSSxFQUFFLFdBQVcsQ0FBQyxFQUFFLEVBQUUsUUFBUSxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUM7SUFDaEcsTUFBTSxnQkFBZ0IsU0FBRyxPQUFPLENBQUMsV0FBVyxDQUFDLHlCQUFhLENBQUMsWUFBWSxFQUFFLEVBQUUsQ0FBa0IsdUNBQUksRUFBRSxFQUFBLENBQUM7SUFFcEcsZ0JBQUksZ0JBQWdCLDBDQUFFLE9BQU8sMENBQUUsY0FBYyxFQUFFO1FBQzdDLGFBQWEsQ0FBQyxXQUFXLEVBQUUsQ0FBQztLQUM3QjtJQUVELE9BQU8sbUJBQW1CLENBQUMsYUFBYSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2hELENBQUM7QUF6QkQsNENBeUJDO0FBRUQ7OztHQUdHO0FBQ0gsU0FBZ0Isa0JBQWtCLENBQXFDLEdBQVc7SUFDaEYsSUFBSSxPQUFPLEdBQUcsS0FBSyxRQUFRLEVBQUU7UUFDM0IsTUFBTSxJQUFJLFNBQVMsQ0FBQyxhQUFNLENBQUMseUNBQXlDLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQztLQUM3RTtJQUVELE9BQU8sYUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQVEsQ0FBQztBQUNoQyxDQUFDO0FBTkQsZ0RBTUM7QUFFRCwwQkFBMEI7QUFDMUI7Ozs7OztHQU1HO0FBQ0gsU0FBZ0IsZ0JBQWdCLENBQXNDLEVBQUs7SUFDekUsT0FBTyxnQkFBUyxDQUNkLGdCQUFnQixDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsRUFBRSxDQUFDLEVBQ3BDLDJGQUEyRixDQUFDLENBQUM7QUFDakcsQ0FBQztBQUpELDRDQUlDO0FBRUQ7Ozs7R0FJRztBQUNILFNBQWdCLFdBQVcsQ0FBc0MsRUFBSyxFQUFFLE9BQWdDOztJQUN0RyxJQUFJLE9BQU8sRUFBRSxLQUFLLFVBQVUsRUFBRTtRQUM1QixNQUFNLElBQUkscUJBQVksQ0FBQyxFQUFFLENBQUMsQ0FBQztLQUM1QjtJQUVELE1BQU0sYUFBYSxHQUFHLDBCQUFrQixDQUFDLE9BQU8sRUFBRSxFQUFFLENBQUMsQ0FBQztJQUV0RCxJQUFJLEdBQXVCLENBQUM7SUFDNUIseUJBQXlCO0lBQ3pCLElBQUksVUFBVSxHQUFHLE1BQU0sQ0FBQyxjQUFjLENBQUMsRUFBRSxDQUFDLFNBQVMsQ0FBQyxDQUFDLFdBQVcsQ0FBQztJQUNqRSw2QkFBNkI7SUFDN0IsT0FBTyxPQUFBLFVBQVUsMENBQUUsSUFBSSxNQUFLLFFBQVEsRUFBRTtRQUNwQywwQkFBMEI7UUFDMUIsSUFBSSxVQUFVLENBQUMsSUFBSSxLQUFLLFdBQVcsRUFBRSxFQUFFLDRFQUE0RTtZQUNqSCxnQkFBUyxDQUFDLEdBQUcsRUFBRSxDQUFDLFNBQVMsRUFBRSw0REFBNEQsQ0FBQyxFQUFFLENBQUM7WUFFM0YsTUFBTTtTQUNQO1FBQ0QsZ0JBQWdCO1FBQ2hCLEdBQUcsR0FBRyxxQkFBWSxDQUFDLFVBQVUsRUFBRSxHQUFHLEVBQUUsYUFBYSxDQUFDLENBQUM7UUFDbkQsa0JBQWtCO1FBQ2xCLFVBQVUsR0FBRyxNQUFNLENBQUMsY0FBYyxDQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUMsQ0FBQyxXQUFXLENBQUM7S0FDdEU7SUFDRCw4QkFBOEI7SUFDOUIsR0FBRyxHQUFHLHFCQUFZLENBQUMsRUFBRSxFQUFFLEdBQUcsRUFBRSxhQUFhLENBQUMsQ0FBQztJQUUzQyxPQUFPLEdBQUcsQ0FBQztBQUNiLENBQUM7QUEzQkQsa0NBMkJDO0FBRUQ7Ozs7Ozs7Ozs7Ozs7R0FhRztBQUNILFNBQWdCLG1CQUFtQixDQUFzQyxLQUEwQixFQUFFLEVBQUs7SUFDeEcsSUFBSSxDQUFDLENBQUMsS0FBSyxDQUFDLFNBQVMsWUFBWSxRQUFRLENBQUMsS0FBSyxDQUFDLEVBQUU7UUFDaEQsTUFBTSxJQUFJLFNBQVMsQ0FBQyxJQUFJLEtBQUsseUJBQXlCLENBQUMsQ0FBQztLQUN6RDtJQUNELElBQUksT0FBTyxFQUFFLEtBQUssVUFBVSxFQUFFO1FBQzVCLE1BQU0sSUFBSSxxQkFBWSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0tBQzVCO0lBRUQsTUFBTSxJQUFJLEdBQUcsZUFBTyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBRXpCLElBQUksbUJBQVksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUU7UUFDMUIsTUFBTSxJQUFJLEtBQUssQ0FBQyxhQUFNLENBQUMsd0RBQXdEO2NBQzNFLDBFQUEwRTtjQUMxRSxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQztLQUNwQjtJQUVELGFBQU0sQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQ3hCLG1CQUFZLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsQ0FBQztJQUUzQixPQUFPLGFBQU0sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUEwQixDQUFDO0FBQ25ELENBQUM7QUFwQkQsa0RBb0JDO0FBRUQ7Ozs7O0dBS0c7QUFDSCxTQUFnQixXQUFXLENBQUMsSUFBWTtJQUN0QyxJQUFJLE9BQU8sSUFBSSxLQUFLLFFBQVEsRUFBRTtRQUM1QixNQUFNLElBQUksU0FBUyxDQUFDLHNDQUFzQyxDQUFDLENBQUM7S0FDN0Q7SUFDRCxJQUFJLENBQUMsYUFBTSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRTtRQUNyQixNQUFNLElBQUksS0FBSyxDQUFDLFVBQVUsSUFBSSxzQkFBc0IsQ0FBQyxDQUFDO0tBQ3ZEO0lBRUQsb0JBQU0sQ0FBQyxLQUFLLENBQUMscUJBQXFCLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFFMUMsYUFBTSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBRXRDLGFBQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDcEIsbUJBQVksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDNUIsQ0FBQztBQWRELGtDQWNDO0FBRUQ7OztHQUdHO0FBQ0gsU0FBZ0Isb0JBQW9CLENBQXNDLEVBQUs7SUFDN0UsSUFBSSxPQUFPLEVBQUUsS0FBSyxVQUFVLEVBQUU7UUFDNUIsTUFBTSxJQUFJLHFCQUFZLENBQUMsRUFBRSxDQUFDLENBQUM7S0FDNUI7SUFFRCxPQUFPLFdBQVcsQ0FBQyxlQUFPLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztBQUNsQyxDQUFDO0FBTkQsb0RBTUM7QUFFRDs7Ozs7Ozs7Ozs7OztHQWFHO0FBQ0gsU0FBZ0IsNkJBQTZCLENBQzNDLElBQXlCLEVBQ3pCLEVBQUssRUFDTCxFQUFXO0lBRVgsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsWUFBWSxRQUFRLENBQUMsS0FBSyxDQUFDLEVBQUU7UUFDL0MsTUFBTSxJQUFJLFNBQVMsQ0FBQyxJQUFJLElBQUkseUJBQXlCLENBQUMsQ0FBQztLQUN4RDtJQUNELElBQUksT0FBTyxFQUFFLEtBQUssVUFBVSxFQUFFO1FBQzVCLE1BQU0sSUFBSSxxQkFBWSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0tBQzVCO0lBRUQsTUFBTSxJQUFJLEdBQUcsZUFBTyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ3pCLElBQUksYUFBTSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRTtRQUNwQixPQUFPLGFBQU0sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUEwQixDQUFDO0tBQ2xEO0lBQ0QsTUFBTSxHQUFHLEdBQUcsV0FBVyxDQUFDLEVBQUUsQ0FBeUMsQ0FBQztJQUVwRSxNQUFNLGdCQUFnQixHQUFHLEdBQUcsQ0FBQyxHQUFHLENBQUMsa0JBQWtCLENBQUMsQ0FBQztJQUNyRCxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsRUFBRTtRQUM5QixHQUFHLENBQUMsS0FBSyxDQUFDLGdCQUFnQixDQUFDLENBQUMsT0FBTyxDQUFDLHVCQUF1QixHQUFHLElBQUksQ0FBQztLQUNwRTtJQUVELE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxFQUFFLEdBQUcsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFNUQsT0FBTyxtQkFBbUIsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDeEMsQ0FBQztBQTFCRCxzRUEwQkMifQ==